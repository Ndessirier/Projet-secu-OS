[Hier 10:29] ROUVROY Nicolas
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <sys/types.h>

#include <sys/inotify.h>
 
#define EVENT_SIZE  (sizeof(struct inotify_event))

#define BUF_LEN     (1024 * (EVENT_SIZE + 16))
 
void surveiller_arborescence(const char *chemin) {

    int fd, wd;

    char buffer[BUF_LEN];
 
    fd = inotify_init();

    if (fd < 0) {

        perror("inotify_init");

        exit(EXIT_FAILURE);

    }
 
    wd = inotify_add_watch(fd, chemin, IN_MODIFY | IN_CREATE | IN_DELETE);

    if (wd < 0) {

        perror("inotify_add_watch");

        exit(EXIT_FAILURE);

    }
 
    printf("Surveillance de %s en cours...\n", chemin);
 
    while (1) {

        int length = read(fd, buffer, BUF_LEN);

        if (length < 0) {

            perror("read");

            exit(EXIT_FAILURE);

        }
 
        int i = 0;

        while (i < length) {

            struct inotify_event *event = (struct inotify_event *) &buffer[i];

            if (event->len) {

                if (event->mask & IN_CREATE) {

                    printf("CrÃ©ation: %s\n", event->name);

                } else if (event->mask & IN_DELETE) {

                    printf("Suppression: %s\n", event->name);

                } else if (event->mask & IN_MODIFY) {

                    printf("Modification: %s\n", event->name);

                }

            }

            i += EVENT_SIZE + event->len;

        }

    }
 
    close(fd);

}
 
int main(int argc, char *argv[]) {

    if (argc != 2) {

        fprintf(stderr, "Usage: %s chemin\n", argv[0]);

        exit(EXIT_FAILURE);

    }
 
    surveiller_arborescence(argv[1]);
 
    return EXIT_SUCCESS;

}
