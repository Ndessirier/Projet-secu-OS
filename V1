#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <cjson/cJSON.h>
#include <unistd.h>
#include <sys/inotify.h>
#include <time.h>
#include <limits.h>
#include <errno.h>
#include <fcntl.h>

#define EVENT_SIZE  (sizeof(struct inotify_event))
#define BUF_LEN     (2048 * (EVENT_SIZE + 16))
#define JSON_FILE_PATH "/usr/share/secu_os/bibliotheque_app.json"
#define LOG_FILE_PATH "/usr/share/secu_os/log_surveillance.txt"
#define LOG_DIRECTORY "/usr/share/secu_os/"

// Fonction pour créer le répertoire secu_os s'il n'existe pas
void createSecuOsDirectory() {
    // Vérifier si le répertoire secu_os existe déjà
    struct stat st;
    if (stat("/usr/share/secu_os", &st) == 0) {
        if (S_ISDIR(st.st_mode)) {
            printf("Le répertoire secu_os existe déjà.\n");
            return;
        }
    }

    // Le répertoire secu_os n'existe pas, donc nous le créons
    printf("Le répertoire secu_os n'existe pas. Création du répertoire...\n");

    // Création du répertoire secu_os
    if (mkdir("/usr/share/secu_os", 0755) == 0) {
        printf("Le répertoire secu_os a été créé avec succès.\n");
    } else {
        perror("Erreur lors de la création du répertoire secu_os");
    }
}

// Fonction pour créer le fichier JSON s'il n'existe pas
void createJsonFileIfNeeded() {
    // Vérifier si le fichier JSON existe déjà
    struct stat st;
    if (stat(JSON_FILE_PATH, &st) == 0) {
        if (S_ISREG(st.st_mode)) {
            printf("Le fichier JSON existe déjà.\n");
            return;
        }
    }

    // Le fichier JSON n'existe pas, donc nous le créons
    printf("Le fichier JSON n'existe pas. Création du fichier...\n");

    // Créer un objet JSON vide avec un tableau "files"
    cJSON *root = cJSON_CreateObject();
    cJSON *filesArray = cJSON_CreateArray();
    cJSON_AddItemToObject(root, "files", filesArray);

    // Ouvrir le fichier JSON en mode écriture
    FILE *file = fopen(JSON_FILE_PATH, "w");
    if (!file) {
        cJSON_Delete(root);
        perror("Erreur lors de l'ouverture du fichier JSON en mode écriture");
        return;
    }

    // Écrire le JSON dans le fichier
    char *jsonStr = cJSON_Print(root);
    if (!jsonStr) {
        cJSON_Delete(root);
        fclose(file);
        printf("Erreur : Impossible d'écrire le JSON dans le fichier.\n");
        return;
    }
    fprintf(file, "%s\n", jsonStr);
    free(jsonStr);
    fclose(file);

    printf("Fichier JSON créé avec succès.\n");

    // Libérer la mémoire allouée pour le JSON
    cJSON_Delete(root);
}

void creer_log_surveillance() {
     const char *chemin = "/usr/share/secu_os/log_surveillance.txt";

    // Vérifier si le fichier existe déjà
    if (access(chemin, F_OK) != -1) {
        printf("Le fichier de journalisation existe déjà.\n");
        return;
    }

    FILE *file = fopen(chemin, "w");
    if (!file) {
        perror("Erreur lors de la création du fichier de journalisation");
        return;
    }

    fclose(file);

    printf("Fichier de journalisation créé avec succès.\n");
}
// Fonction pour ajouter un chemin de fichier dans le JSON
void addFilePathToJson(const char *newFilePath) {
    // Ouvrir le fichier JSON
    FILE *file = fopen(JSON_FILE_PATH, "r");
    if (!file) {
        perror("Erreur lors de l'ouverture du fichier JSON");
        return;
    }

    // Charger le JSON depuis le fichier
    fseek(file, 0, SEEK_END);
    long fileSize = ftell(file);
    fseek(file, 0, SEEK_SET);
    char *jsonBuffer = (char *)malloc(fileSize + 1);
    if (!jsonBuffer) {
        fclose(file);
        printf("Erreur : Impossible d'allouer de la mémoire pour lire le JSON.\n");
        return;
    }
    size_t bytesRead = fread(jsonBuffer, 1, fileSize, file);
    fclose(file);
    if (bytesRead != fileSize) {
        free(jsonBuffer);
        printf("Erreur : Impossible de lire le contenu du fichier JSON.\n");
        return;
    }
    jsonBuffer[fileSize] = '\0';

    // Analyser le JSON
    cJSON *root = cJSON_Parse(jsonBuffer);
    free(jsonBuffer);
    if (!root) {
        printf("Erreur : Impossible de parser le JSON.\n");
        return;
    }

    // Récupérer le tableau "files" du JSON
    cJSON *filesArray = cJSON_GetObjectItem(root, "files");
    if (!filesArray || !cJSON_IsArray(filesArray)) {
        cJSON_Delete(root);
        printf("Erreur : Le JSON ne contient pas de tableau de fichiers.\n");
        return;
    }

    // Créer un nouvel objet JSON pour le chemin de fichier
    cJSON *newFileJson = cJSON_CreateString(newFilePath);
    if (!newFileJson) {
        cJSON_Delete(root);
        printf("Erreur : Impossible de créer l'objet JSON pour le nouveau chemin de fichier.\n");
        return;
    }

    // Ajouter le nouvel objet JSON dans le tableau "files"
    cJSON_AddItemToArray(filesArray, newFileJson);

    // Ouvrir à nouveau le fichier JSON en mode écriture pour écrire le JSON modifié
    file = fopen(JSON_FILE_PATH, "w");
    if (!file) {
        cJSON_Delete(root);
        perror("Erreur lors de l'ouverture du fichier JSON en mode écriture");
        return;
    }

    // Écrire le JSON modifié dans le fichier
    char *jsonStr = cJSON_Print(root);
    if (!jsonStr) {
        cJSON_Delete(root);
        fclose(file);
        printf("Erreur : Impossible d'écrire le JSON modifié dans le fichier.\n");
        return;
    }

    // Écrire chaque chemin sur une nouvelle ligne pour une meilleure lisibilité
    char *token = strtok(jsonStr, "\n");
    while (token != NULL) {
        fprintf(file, "%s\n", token);
        token = strtok(NULL, "\n");
    }

    free(jsonStr);
    fclose(file);

    printf("Le chemin de fichier a été ajouté avec succès dans le JSON.\n");

    // Libérer la mémoire allouée pour le JSON
    cJSON_Delete(root);
}

// Fonction pour supprimer un chemin de fichier du JSON
void removeFilePathFromJson(const char *filePathToRemove) {
    // Ouvrir le fichier JSON
    FILE *file = fopen(JSON_FILE_PATH, "r");
    if (!file) {
        perror("Erreur lors de l'ouverture du fichier JSON");
        return;
    }

    // Charger le JSON depuis le fichier
    fseek(file, 0, SEEK_END);
    long fileSize = ftell(file);
    fseek(file, 0, SEEK_SET);
    char *jsonBuffer = (char *)malloc(fileSize + 1);
    if (!jsonBuffer) {
        fclose(file);
        printf("Erreur : Impossible d'allouer de la mémoire pour lire le JSON.\n");
        return;
    }
    size_t bytesRead = fread(jsonBuffer, 1, fileSize, file);
    fclose(file);
    if (bytesRead != fileSize) {
        free(jsonBuffer);
        printf("Erreur : Impossible de lire le contenu du fichier JSON.\n");
        return;
    }
    jsonBuffer[fileSize] = '\0';

    // Analyser le JSON
    cJSON *root = cJSON_Parse(jsonBuffer);
    free(jsonBuffer);
    if (!root) {
        printf("Erreur : Impossible de parser le JSON.\n");
        return;
    }

    // Récupérer le tableau "files" du JSON
    cJSON *filesArray = cJSON_GetObjectItem(root, "files");
    if (!filesArray || !cJSON_IsArray(filesArray)) {
        cJSON_Delete(root);
        printf("Erreur : Le JSON ne contient pas de tableau de fichiers.\n");
        return;
    }

    // Parcourir le tableau "files" et supprimer le chemin de fichier spécifié
    int arraySize = cJSON_GetArraySize(filesArray);
    for (int i = 0; i < arraySize; i++) {
        cJSON *fileItem = cJSON_GetArrayItem(filesArray, i);
        if (cJSON_IsString(fileItem) && strcmp(cJSON_GetStringValue(fileItem), filePathToRemove) == 0) {
            cJSON_DeleteItemFromArray(filesArray, i);

            // Ouvrir à nouveau le fichier JSON en mode écriture pour écrire le JSON modifié
            file = fopen(JSON_FILE_PATH, "w");
            if (!file) {
                cJSON_Delete(root);
                perror("Erreur lors de l'ouverture du fichier JSON en mode écriture");
                return;
            }

            // Écrire le JSON modifié dans le fichier
            char *jsonStr = cJSON_Print(root);
            if (!jsonStr) {
                cJSON_Delete(root);
                fclose(file);
                printf("Erreur : Impossible d'écrire le JSON modifié dans le fichier.\n");
                return;
            }
            fprintf(file, "%s\n", jsonStr);
            free(jsonStr);
            fclose(file);

            printf("Le chemin de fichier a été supprimé avec succès du JSON.\n");

            // Libérer la mémoire allouée pour le JSON
            cJSON_Delete(root);
            return;
        }
    }

    // Si le chemin de fichier n'a pas été trouvé dans le JSON
    cJSON_Delete(root);
    printf("Le chemin de fichier spécifié n'a pas été trouvé dans le JSON.\n");
}

void surveiller_arborescence(const char *chemin) {
    int fd;
    char buffer[BUF_LEN];
    int *wd;
    int nb_chemins = 0;

    // Initialisation d'inotify
    fd = inotify_init();
    if (fd < 0) {
        perror("Erreur lors de l'initialisation d'inotify");
        exit(EXIT_FAILURE);
    }
    printf("Inotify initialisé avec succès.\n");

    // Ouverture du fichier de journalisation
    FILE *log_file = fopen(LOG_FILE_PATH, "a");
    if (log_file == NULL) {
        perror("Erreur lors de l'ouverture du fichier de journalisation");
        exit(EXIT_FAILURE);
    }
    printf("Fichier de journalisation ouvert avec succès.\n");

    // Lecture du fichier JSON
    FILE *f = fopen(JSON_FILE_PATH, "r");
    if (f == NULL) {
        perror("Erreur lors de l'ouverture du fichier JSON");
        fclose(log_file); // Fermeture du fichier de journalisation avant de quitter
        exit(EXIT_FAILURE);
    }
    printf("Fichier JSON ouvert avec succès.\n");

    // Obtention de la taille du fichier JSON
    fseek(f, 0, SEEK_END);
    long fsize = ftell(f);
    fseek(f, 0, SEEK_SET);

    // Allocation de mémoire pour le contenu du fichier JSON
    char *json_str = malloc(fsize + 1);
    if (json_str == NULL) {
        perror("Erreur lors de l'allocation de mémoire");
        fclose(f);
        fclose(log_file);
        exit(EXIT_FAILURE);
    }
    printf("Mémoire allouée pour le contenu JSON avec succès.\n");

    // Lecture du contenu du fichier JSON
    fread(json_str, 1, fsize, f);
    fclose(f);
    printf("Contenu JSON lu avec succès.\n");

    // Ajout d'un caractère de fin de chaîne
    json_str[fsize] = '\0';

    // Analyse du JSON
    cJSON *json = cJSON_Parse(json_str);
    if (json == NULL) {
        perror("Erreur lors de l'analyse du JSON");
        free(json_str);
        fclose(log_file);
        exit(EXIT_FAILURE);
    }
    printf("JSON analysé avec succès.\n");

    // Récupération du tableau "files"
    cJSON *files = cJSON_GetObjectItem(json, "files");
    if (!cJSON_IsArray(files)) {
        perror("Le champ 'files' n'est pas un tableau");
        cJSON_Delete(json);
        free(json_str);
        fclose(log_file);
        exit(EXIT_FAILURE);
    }
    printf("Tableau 'files' récupéré avec succès.\n");

    // Parcours du tableau et ajout de la surveillance inotify pour chaque chemin
    cJSON *file;
    nb_chemins = cJSON_GetArraySize(files);
    wd = malloc(nb_chemins * sizeof(int)); // Allocation du tableau wd
    if (wd == NULL) {
        perror("Erreur lors de l'allocation de mémoire");
        cJSON_Delete(json);
        free(json_str);
        fclose(log_file);
        exit(EXIT_FAILURE);
    }
    printf("Mémoire allouée pour le tableau wd avec succès.\n");

    fprintf(log_file, "Nombre de chemins à surveiller : %d\n", nb_chemins);
    fflush(log_file);
    printf("Nombre de chemins à surveiller : %d\n", nb_chemins);

    for (int i = 0; i < nb_chemins; i++) {
        cJSON *item = cJSON_GetArrayItem(files, i);
        if (cJSON_IsString(item)) {
            const char *chemin = item->valuestring;
            wd[i] = inotify_add_watch(fd, chemin, IN_MODIFY | IN_CREATE | IN_DELETE | IN_ATTRIB | IN_CLOSE_WRITE);
            if (wd[i] < 0) {
                fprintf(stderr, "Erreur lors de l'ajout de la surveillance pour le chemin %s\n", chemin);
                cJSON_Delete(json);
                free(json_str);
                free(wd);
                fclose(log_file);
                exit(EXIT_FAILURE);
            }
            fprintf(log_file, "Surveillance ajoutée pour le chemin : %s\n", chemin);
            fflush(log_file);
            printf("Surveillance ajoutée pour le chemin : %s\n", chemin);
        }
    }

    // Nettoyage
    cJSON_Delete(json);
    free(json_str);

    // Écriture du message indiquant le début de la vérification dans le fichier de log
    fprintf(log_file, "Début de la vérification pour les répertoires spécifiés\n");
    fflush(log_file);
    printf("Début de la vérification pour les répertoires spécifiés\n");

    // Boucle de surveillance des événements
    while (1) {
        int length = read(fd, buffer, BUF_LEN);
        printf("Longueur du buffer après lecture : %d\n", length);
        if (length < 0) {
            perror("Erreur lors de la lecture des événements");
            fclose(log_file);
            free(wd); // Libération de la mémoire allouée pour wd avant de quitter
            exit(EXIT_FAILURE);
        }

        int i = 0;
        while (i < length) {
            struct inotify_event *event = (struct inotify_event *) &buffer[i];
            if (event->len) {
                for (int j = 0; j < nb_chemins; j++) {
                    if (wd[j] == event->wd) {
                        const char *chemin_surveille = cJSON_GetArrayItem(files, j)->valuestring;
                        // Traitement de l'événement en fonction du chemin surveillé
                        fprintf(log_file, "Événement détecté pour le chemin surveillé : %s\n", chemin_surveille);
                        fprintf(stdout, "Événement détecté pour le chemin surveillé : %s\n", chemin_surveille);
                        // ...
                        break;
                    }
                }
            }
            i += sizeof(struct inotify_event) + event->len;
        }
    }

    // Fermeture des descripteurs de fichier et libération de la mémoire
    close(fd);
    fclose(log_file);
    free(wd);
}




int main(int argc, char *argv[]) {
    // Vérifier le nombre d'arguments
    if (argc < 2) {
        printf("Utilisation : %s <commande> [<chemin>]\n", argv[0]);
        return 1;
    }

    // Créer le fichier de journalisation de la surveillance
    creer_log_surveillance();
    // Créer le répertoire SecuOs s'il n'existe pas
    createSecuOsDirectory();
    // Créer le fichier JSON si nécessaire
    createJsonFileIfNeeded();

    if (strcmp(argv[1], "add") == 0) {
        // Ajouter un chemin au fichier JSON
        if (argc < 3) {
            printf("Utilisation : %s add <chemin>\n", argv[0]);
            return 1;
        }
        addFilePathToJson(argv[2]);
    } else if (strcmp(argv[1], "del") == 0) {
        // Supprimer un chemin du fichier JSON// Vérifier si l'option "accès" a été spécifiée
    } else if (strcmp(argv[1], "surveillance") == 0) {
        // Activer la surveillance d'arborescence
        surveiller_arborescence(".");
    // Vérifier si l'option "acces" a été spécifiée
    } else {
        printf("Commande non reconnue.\n");
        return 1;
    }

    return 0;
}
